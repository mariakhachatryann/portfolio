{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-updater-out-modes/esm/OutOutMode.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"out\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"inside\": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case \"outside\": {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case \"normal\": {\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === \"bottom\" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n",
      "start": 1702544652606,
      "end": 1702544652743,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652743,
      "end": 1702544652743,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652744,
      "end": 1702544652744,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652744,
      "end": 1702544652745,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652745,
      "end": 1702544652745,
      "order": "normal"
    }
  ]
}
