{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? 0;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != 0) {\n            this.multTo(1.0 / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n",
      "start": 1703979086890,
      "end": 1703979087034,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703979087034,
      "end": 1703979087034,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703979087034,
      "end": 1703979087034,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703979087034,
      "end": 1703979087035,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703979087035,
      "end": 1703979087035,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703979087035,
      "end": 1703979087036,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703979087036,
      "end": 1703979087036,
      "order": "normal"
    }
  ]
}
