{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Core/Engine.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { errorPrefix, generatedAttribute } from \"./Utils/Constants\";\nimport { getLogger, isBoolean, isFunction, isNumber, isString, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { Container } from \"./Container\";\nimport { EventDispatcher } from \"../Utils/EventDispatcher\";\nimport { Plugins } from \"./Utils/Plugins\";\nimport { getRandom } from \"../Utils/NumberUtils\";\nasync function getDataFromUrl(data) {\n    const url = itemFromSingleOrMultiple(data.url, data.index);\n    if (!url) {\n        return data.fallback;\n    }\n    const response = await fetch(url);\n    if (response.ok) {\n        return response.json();\n    }\n    getLogger().error(`${errorPrefix} ${response.status} while retrieving config file`);\n    return data.fallback;\n}\nfunction isParamsEmpty(params) {\n    return !params.id && !params.element && !params.url && !params.options;\n}\nfunction isParams(obj) {\n    return !isParamsEmpty(obj);\n}\nexport class Engine {\n    constructor() {\n        this._configs = new Map();\n        this._domArray = [];\n        this._eventDispatcher = new EventDispatcher();\n        this._initialized = false;\n        this.plugins = new Plugins(this);\n    }\n    get configs() {\n        const res = {};\n        for (const [name, config] of this._configs) {\n            res[name] = config;\n        }\n        return res;\n    }\n    get version() {\n        return \"2.12.0\";\n    }\n    addConfig(nameOrConfig, config) {\n        if (isString(nameOrConfig)) {\n            if (config) {\n                config.name = nameOrConfig;\n                this._configs.set(nameOrConfig, config);\n            }\n        }\n        else {\n            this._configs.set(nameOrConfig.name ?? \"default\", nameOrConfig);\n        }\n    }\n    addEventListener(type, listener) {\n        this._eventDispatcher.addEventListener(type, listener);\n    }\n    async addInteractor(name, interactorInitializer, refresh = true) {\n        this.plugins.addInteractor(name, interactorInitializer);\n        await this.refresh(refresh);\n    }\n    async addMover(name, moverInitializer, refresh = true) {\n        this.plugins.addParticleMover(name, moverInitializer);\n        await this.refresh(refresh);\n    }\n    async addParticleUpdater(name, updaterInitializer, refresh = true) {\n        this.plugins.addParticleUpdater(name, updaterInitializer);\n        await this.refresh(refresh);\n    }\n    async addPathGenerator(name, generator, refresh = true) {\n        this.plugins.addPathGenerator(name, generator);\n        await this.refresh(refresh);\n    }\n    async addPlugin(plugin, refresh = true) {\n        this.plugins.addPlugin(plugin);\n        await this.refresh(refresh);\n    }\n    async addPreset(preset, options, override = false, refresh = true) {\n        this.plugins.addPreset(preset, options, override);\n        await this.refresh(refresh);\n    }\n    async addShape(shape, drawer, initOrRefresh, afterEffectOrRefresh, destroyOrRefresh, refresh = true) {\n        let customDrawer;\n        let realRefresh = refresh, realInit, realAfterEffect, realDestroy;\n        if (isBoolean(initOrRefresh)) {\n            realRefresh = initOrRefresh;\n            realInit = undefined;\n        }\n        else {\n            realInit = initOrRefresh;\n        }\n        if (isBoolean(afterEffectOrRefresh)) {\n            realRefresh = afterEffectOrRefresh;\n            realAfterEffect = undefined;\n        }\n        else {\n            realAfterEffect = afterEffectOrRefresh;\n        }\n        if (isBoolean(destroyOrRefresh)) {\n            realRefresh = destroyOrRefresh;\n            realDestroy = undefined;\n        }\n        else {\n            realDestroy = destroyOrRefresh;\n        }\n        if (isFunction(drawer)) {\n            customDrawer = {\n                afterEffect: realAfterEffect,\n                destroy: realDestroy,\n                draw: drawer,\n                init: realInit,\n            };\n        }\n        else {\n            customDrawer = drawer;\n        }\n        this.plugins.addShapeDrawer(shape, customDrawer);\n        await this.refresh(realRefresh);\n    }\n    dispatchEvent(type, args) {\n        this._eventDispatcher.dispatchEvent(type, args);\n    }\n    dom() {\n        return this._domArray;\n    }\n    domItem(index) {\n        const dom = this.dom(), item = dom[index];\n        if (!item || item.destroyed) {\n            dom.splice(index, 1);\n            return;\n        }\n        return item;\n    }\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n    }\n    async load(tagIdOrOptionsOrParams, options) {\n        return this.loadFromArray(tagIdOrOptionsOrParams, options);\n    }\n    async loadFromArray(tagIdOrOptionsOrParams, optionsOrIndex, index) {\n        let params;\n        if (!isParams(tagIdOrOptionsOrParams)) {\n            params = {};\n            if (isString(tagIdOrOptionsOrParams)) {\n                params.id = tagIdOrOptionsOrParams;\n            }\n            else {\n                params.options = tagIdOrOptionsOrParams;\n            }\n            if (isNumber(optionsOrIndex)) {\n                params.index = optionsOrIndex;\n            }\n            else {\n                params.options = optionsOrIndex ?? params.options;\n            }\n            params.index = index ?? params.index;\n        }\n        else {\n            params = tagIdOrOptionsOrParams;\n        }\n        return this._loadParams(params);\n    }\n    async loadJSON(tagId, pathConfigJson, index) {\n        let url, id;\n        if (isNumber(pathConfigJson) || pathConfigJson === undefined) {\n            url = tagId;\n        }\n        else {\n            id = tagId;\n            url = pathConfigJson;\n        }\n        return this._loadParams({ id: id, url, index });\n    }\n    async refresh(refresh = true) {\n        if (!refresh) {\n            return;\n        }\n        this.dom().forEach((t) => t.refresh());\n    }\n    removeEventListener(type, listener) {\n        this._eventDispatcher.removeEventListener(type, listener);\n    }\n    async set(id, element, options, index) {\n        const params = { index };\n        if (isString(id)) {\n            params.id = id;\n        }\n        else {\n            params.element = id;\n        }\n        if (element instanceof HTMLElement) {\n            params.element = element;\n        }\n        else {\n            params.options = element;\n        }\n        if (isNumber(options)) {\n            params.index = options;\n        }\n        else {\n            params.options = options ?? params.options;\n        }\n        return this._loadParams(params);\n    }\n    async setJSON(id, element, pathConfigJson, index) {\n        const params = {};\n        if (id instanceof HTMLElement) {\n            params.element = id;\n            params.url = element;\n            params.index = pathConfigJson;\n        }\n        else {\n            params.id = id;\n            params.element = element;\n            params.url = pathConfigJson;\n            params.index = index;\n        }\n        return this._loadParams(params);\n    }\n    setOnClickHandler(callback) {\n        const dom = this.dom();\n        if (!dom.length) {\n            throw new Error(`${errorPrefix} can only set click handlers after calling tsParticles.load()`);\n        }\n        for (const domItem of dom) {\n            domItem.addClickHandler(callback);\n        }\n    }\n    async _loadParams(params) {\n        const id = params.id ?? `tsparticles${Math.floor(getRandom() * 10000)}`, { index, url } = params, options = url ? await getDataFromUrl({ fallback: params.options, url, index }) : params.options;\n        let domContainer = params.element ?? document.getElementById(id);\n        if (!domContainer) {\n            domContainer = document.createElement(\"div\");\n            domContainer.id = id;\n            document.body.append(domContainer);\n        }\n        const currentOptions = itemFromSingleOrMultiple(options, index), dom = this.dom(), oldIndex = dom.findIndex((v) => v.id === id);\n        if (oldIndex >= 0) {\n            const old = this.domItem(oldIndex);\n            if (old && !old.destroyed) {\n                old.destroy();\n                dom.splice(oldIndex, 1);\n            }\n        }\n        let canvasEl;\n        if (domContainer.tagName.toLowerCase() === \"canvas\") {\n            canvasEl = domContainer;\n            canvasEl.dataset[generatedAttribute] = \"false\";\n        }\n        else {\n            const existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n            if (existingCanvases.length) {\n                canvasEl = existingCanvases[0];\n                canvasEl.dataset[generatedAttribute] = \"false\";\n            }\n            else {\n                canvasEl = document.createElement(\"canvas\");\n                canvasEl.dataset[generatedAttribute] = \"true\";\n                domContainer.appendChild(canvasEl);\n            }\n        }\n        if (!canvasEl.style.width) {\n            canvasEl.style.width = \"100%\";\n        }\n        if (!canvasEl.style.height) {\n            canvasEl.style.height = \"100%\";\n        }\n        const newItem = new Container(this, id, currentOptions);\n        if (oldIndex >= 0) {\n            dom.splice(oldIndex, 0, newItem);\n        }\n        else {\n            dom.push(newItem);\n        }\n        newItem.canvas.loadCanvas(canvasEl);\n        await newItem.start();\n        return newItem;\n    }\n}\n",
      "start": 1703957084352,
      "end": 1703957084576,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703957084576,
      "end": 1703957084576,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703957084576,
      "end": 1703957084577,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703957084577,
      "end": 1703957084577,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703957084578,
      "end": 1703957084578,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703957084578,
      "end": 1703957084579,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703957084580,
      "end": 1703957084580,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703957084580,
      "end": 1703957084581,
      "order": "normal"
    }
  ]
}
