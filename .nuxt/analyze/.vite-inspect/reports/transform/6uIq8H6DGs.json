{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n",
      "start": 1702544652533,
      "end": 1702544652644,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652645,
      "end": 1702544652645,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652645,
      "end": 1702544652646,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652646,
      "end": 1702544652647,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652647,
      "end": 1702544652647,
      "order": "normal"
    }
  ]
}
