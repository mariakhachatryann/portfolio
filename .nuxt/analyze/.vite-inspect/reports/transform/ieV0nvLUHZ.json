{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-interaction-external-connect/esm/Connector.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n",
      "start": 1703979087737,
      "end": 1703979087809,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703979087809,
      "end": 1703979087809,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703979087809,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703979087810,
      "end": 1703979087810,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703979087810,
      "end": 1703979087811,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703979087811,
      "end": 1703979087811,
      "order": "normal"
    }
  ]
}
