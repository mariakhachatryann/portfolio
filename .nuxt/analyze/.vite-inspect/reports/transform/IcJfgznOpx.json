{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Options/Classes/Options.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { deepExtend, executeOnSingleOrMultiple, isBoolean, safeMatchMedia } from \"../../Utils/Utils\";\nimport { Background } from \"./Background/Background\";\nimport { BackgroundMask } from \"./BackgroundMask/BackgroundMask\";\nimport { FullScreen } from \"./FullScreen/FullScreen\";\nimport { Interactivity } from \"./Interactivity/Interactivity\";\nimport { ManualParticle } from \"./ManualParticle\";\nimport { Responsive } from \"./Responsive\";\nimport { Theme } from \"./Theme/Theme\";\nimport { loadParticlesOptions } from \"../../Utils/OptionsUtils\";\nimport { setRangeValue } from \"../../Utils/NumberUtils\";\nexport class Options {\n    constructor(engine, container) {\n        this._findDefaultTheme = (mode) => {\n            return (this.themes.find((theme) => theme.default.value && theme.default.mode === mode) ??\n                this.themes.find((theme) => theme.default.value && theme.default.mode === \"any\"));\n        };\n        this._importPreset = (preset) => {\n            this.load(this._engine.plugins.getPreset(preset));\n        };\n        this._engine = engine;\n        this._container = container;\n        this.autoPlay = true;\n        this.background = new Background();\n        this.backgroundMask = new BackgroundMask();\n        this.defaultThemes = {};\n        this.delay = 0;\n        this.fullScreen = new FullScreen();\n        this.detectRetina = true;\n        this.duration = 0;\n        this.fpsLimit = 120;\n        this.interactivity = new Interactivity(engine, container);\n        this.manualParticles = [];\n        this.particles = loadParticlesOptions(this._engine, this._container);\n        this.pauseOnBlur = true;\n        this.pauseOnOutsideViewport = true;\n        this.responsive = [];\n        this.smooth = false;\n        this.style = {};\n        this.themes = [];\n        this.zLayers = 100;\n    }\n    get backgroundMode() {\n        return this.fullScreen;\n    }\n    set backgroundMode(value) {\n        this.fullScreen.load(value);\n    }\n    get fps_limit() {\n        return this.fpsLimit;\n    }\n    set fps_limit(value) {\n        this.fpsLimit = value;\n    }\n    get retina_detect() {\n        return this.detectRetina;\n    }\n    set retina_detect(value) {\n        this.detectRetina = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.preset !== undefined) {\n            executeOnSingleOrMultiple(data.preset, (preset) => this._importPreset(preset));\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        const detectRetina = data.detectRetina ?? data.retina_detect;\n        if (detectRetina !== undefined) {\n            this.detectRetina = detectRetina;\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        const fpsLimit = data.fpsLimit ?? data.fps_limit;\n        if (fpsLimit !== undefined) {\n            this.fpsLimit = fpsLimit;\n        }\n        if (data.pauseOnBlur !== undefined) {\n            this.pauseOnBlur = data.pauseOnBlur;\n        }\n        if (data.pauseOnOutsideViewport !== undefined) {\n            this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;\n        }\n        if (data.zLayers !== undefined) {\n            this.zLayers = data.zLayers;\n        }\n        this.background.load(data.background);\n        const fullScreen = data.fullScreen ?? data.backgroundMode;\n        if (isBoolean(fullScreen)) {\n            this.fullScreen.enable = fullScreen;\n        }\n        else {\n            this.fullScreen.load(fullScreen);\n        }\n        this.backgroundMask.load(data.backgroundMask);\n        this.interactivity.load(data.interactivity);\n        if (data.manualParticles) {\n            this.manualParticles = data.manualParticles.map((t) => {\n                const tmp = new ManualParticle();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        this.particles.load(data.particles);\n        this.style = deepExtend(this.style, data.style);\n        this._engine.plugins.loadOptions(this, data);\n        if (data.smooth !== undefined) {\n            this.smooth = data.smooth;\n        }\n        const interactors = this._engine.plugins.interactors.get(this._container);\n        if (interactors) {\n            for (const interactor of interactors) {\n                if (interactor.loadOptions) {\n                    interactor.loadOptions(this, data);\n                }\n            }\n        }\n        if (data.responsive !== undefined) {\n            for (const responsive of data.responsive) {\n                const optResponsive = new Responsive();\n                optResponsive.load(responsive);\n                this.responsive.push(optResponsive);\n            }\n        }\n        this.responsive.sort((a, b) => a.maxWidth - b.maxWidth);\n        if (data.themes !== undefined) {\n            for (const theme of data.themes) {\n                const existingTheme = this.themes.find((t) => t.name === theme.name);\n                if (!existingTheme) {\n                    const optTheme = new Theme();\n                    optTheme.load(theme);\n                    this.themes.push(optTheme);\n                }\n                else {\n                    existingTheme.load(theme);\n                }\n            }\n        }\n        this.defaultThemes.dark = this._findDefaultTheme(\"dark\")?.name;\n        this.defaultThemes.light = this._findDefaultTheme(\"light\")?.name;\n    }\n    setResponsive(width, pxRatio, defaultOptions) {\n        this.load(defaultOptions);\n        const responsiveOptions = this.responsive.find((t) => t.mode === \"screen\" && screen ? t.maxWidth > screen.availWidth : t.maxWidth * pxRatio > width);\n        this.load(responsiveOptions?.options);\n        return responsiveOptions?.maxWidth;\n    }\n    setTheme(name) {\n        if (name) {\n            const chosenTheme = this.themes.find((theme) => theme.name === name);\n            if (chosenTheme) {\n                this.load(chosenTheme.options);\n            }\n        }\n        else {\n            const mediaMatch = safeMatchMedia(\"(prefers-color-scheme: dark)\"), clientDarkMode = mediaMatch && mediaMatch.matches, defaultTheme = this._findDefaultTheme(clientDarkMode ? \"dark\" : \"light\");\n            if (defaultTheme) {\n                this.load(defaultTheme.options);\n            }\n        }\n    }\n}\n",
      "start": 1703979087099,
      "end": 1703979087145,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703979087145,
      "end": 1703979087145,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703979087146,
      "end": 1703979087146,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087146,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703979087147,
      "end": 1703979087147,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703979087147,
      "end": 1703979087148,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703979087148,
      "end": 1703979087148,
      "order": "normal"
    }
  ]
}
