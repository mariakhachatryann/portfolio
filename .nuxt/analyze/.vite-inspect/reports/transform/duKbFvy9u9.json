{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-updater-rotate/esm/RotateUpdater.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n",
      "start": 1702665913193,
      "end": 1702665913272,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702665913272,
      "end": 1702665913272,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702665913272,
      "end": 1702665913272,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702665913272,
      "end": 1702665913273,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702665913273,
      "end": 1702665913273,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702665913274,
      "end": 1702665913274,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702665913274,
      "end": 1702665913275,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702665913275,
      "end": 1702665913275,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702665913275,
      "end": 1702665913275,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702665913275,
      "end": 1702665913275,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702665913275,
      "end": 1702665913275,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702665913275,
      "end": 1702665913275,
      "order": "normal"
    }
  ]
}
