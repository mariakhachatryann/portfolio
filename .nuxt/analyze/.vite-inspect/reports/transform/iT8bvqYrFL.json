{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Core/Utils/Plugins.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { executeOnSingleOrMultiple } from \"../../Utils/Utils\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nexport class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this._initializers.interactors.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this._initializers.movers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this._initializers.updaters.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        !this.getPathGenerator(type) && this.pathGenerators.set(type, pathGenerator);\n    }\n    addPlugin(plugin) {\n        !this.getPlugin(plugin.id) && this.plugins.push(plugin);\n    }\n    addPreset(presetKey, options, override = false) {\n        (override || !this.getPreset(presetKey)) && this.presets.set(presetKey, options);\n    }\n    addShapeDrawer(types, drawer) {\n        executeOnSingleOrMultiple(types, (type) => {\n            !this.getShapeDrawer(type) && this.drawers.set(type, drawer);\n        });\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            plugin.needsPlugin(container.actualOptions) && res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            updater.loadOptions && updater.loadOptions(options, ...sourceOptions);\n        }\n    }\n}\n",
      "start": 1702665912755,
      "end": 1702665912863,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702665912863,
      "end": 1702665912863,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702665912864,
      "end": 1702665912864,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702665912864,
      "end": 1702665912865,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702665912865,
      "end": 1702665912865,
      "order": "normal"
    }
  ]
}
