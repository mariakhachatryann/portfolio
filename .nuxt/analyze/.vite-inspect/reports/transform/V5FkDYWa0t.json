{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Options/Classes/Particles/ParticlesOptions.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { deepExtend, executeOnSingleOrMultiple } from \"../../../Utils/Utils\";\nimport { AnimatableColor } from \"../AnimatableColor\";\nimport { Collisions } from \"./Collisions/Collisions\";\nimport { Move } from \"./Move/Move\";\nimport { Opacity } from \"./Opacity/Opacity\";\nimport { ParticlesBounce } from \"./Bounce/ParticlesBounce\";\nimport { ParticlesNumber } from \"./Number/ParticlesNumber\";\nimport { Shadow } from \"./Shadow\";\nimport { Shape } from \"./Shape/Shape\";\nimport { Size } from \"./Size/Size\";\nimport { Stroke } from \"./Stroke\";\nimport { ZIndex } from \"./ZIndex/ZIndex\";\nexport class ParticlesOptions {\n    constructor(engine, container) {\n        this._engine = engine;\n        this._container = container;\n        this.bounce = new ParticlesBounce();\n        this.collisions = new Collisions();\n        this.color = new AnimatableColor();\n        this.color.value = \"#fff\";\n        this.groups = {};\n        this.move = new Move();\n        this.number = new ParticlesNumber();\n        this.opacity = new Opacity();\n        this.reduceDuplicates = false;\n        this.shadow = new Shadow();\n        this.shape = new Shape();\n        this.size = new Size();\n        this.stroke = new Stroke();\n        this.zIndex = new ZIndex();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        this.bounce.load(data.bounce);\n        this.color.load(AnimatableColor.create(this.color, data.color));\n        if (data.groups !== undefined) {\n            for (const group in data.groups) {\n                const item = data.groups[group];\n                if (item !== undefined) {\n                    this.groups[group] = deepExtend(this.groups[group] ?? {}, item);\n                }\n            }\n        }\n        this.move.load(data.move);\n        this.number.load(data.number);\n        this.opacity.load(data.opacity);\n        if (data.reduceDuplicates !== undefined) {\n            this.reduceDuplicates = data.reduceDuplicates;\n        }\n        this.shape.load(data.shape);\n        this.size.load(data.size);\n        this.shadow.load(data.shadow);\n        this.zIndex.load(data.zIndex);\n        const collisions = data.move?.collisions ?? data.move?.bounce;\n        if (collisions !== undefined) {\n            this.collisions.enable = collisions;\n        }\n        this.collisions.load(data.collisions);\n        if (data.interactivity !== undefined) {\n            this.interactivity = deepExtend({}, data.interactivity);\n        }\n        const strokeToLoad = data.stroke ?? data.shape?.stroke;\n        if (strokeToLoad) {\n            this.stroke = executeOnSingleOrMultiple(strokeToLoad, (t) => {\n                const tmp = new Stroke();\n                tmp.load(t);\n                return tmp;\n            });\n        }\n        if (this._container) {\n            const updaters = this._engine.plugins.updaters.get(this._container);\n            if (updaters) {\n                for (const updater of updaters) {\n                    if (updater.loadOptions) {\n                        updater.loadOptions(this, data);\n                    }\n                }\n            }\n            const interactors = this._engine.plugins.interactors.get(this._container);\n            if (interactors) {\n                for (const interactor of interactors) {\n                    if (interactor.loadParticlesOptions) {\n                        interactor.loadParticlesOptions(this, data);\n                    }\n                }\n            }\n        }\n    }\n}\n",
      "start": 1702544651565,
      "end": 1702544651641,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544651641,
      "end": 1702544651641,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544651641,
      "end": 1702544651642,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544651642,
      "end": 1702544651642,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544651642,
      "end": 1702544651643,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544651643,
      "end": 1702544651643,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544651643,
      "end": 1702544651643,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544651643,
      "end": 1702544651643,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544651643,
      "end": 1702544651643,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544651643,
      "end": 1702544651643,
      "order": "normal"
    }
  ]
}
