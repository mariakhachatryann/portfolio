{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n",
      "start": 1702665913020,
      "end": 1702665913115,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702665913115,
      "end": 1702665913115,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702665913115,
      "end": 1702665913116,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702665913116,
      "end": 1702665913116,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702665913116,
      "end": 1702665913117,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702665913117,
      "end": 1702665913117,
      "order": "normal"
    }
  ]
}
