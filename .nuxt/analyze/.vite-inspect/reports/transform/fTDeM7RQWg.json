{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._processBounce = (position, radius, area) => {\n            const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (area instanceof Circle) {\n                    circleBounce(circleBounceDataFromParticle(particle), {\n                        position,\n                        radius,\n                        mass: (radius ** 2 * Math.PI) / 2,\n                        velocity: Vector.origin,\n                        factor: Vector.origin,\n                    });\n                }\n                else if (area instanceof Rectangle) {\n                    rectBounce(particle, calculateBounds(position, radius));\n                }\n            }\n        };\n        this._processMouseBounce = () => {\n            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n            if (!radius || radius < 0 || !mousePos) {\n                return;\n            }\n            this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        };\n        this._singleSelectorBounce = (selector, div) => {\n            const container = this.container, query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, radius + tolerance)\n                    : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n                this._processBounce(pos, radius, area);\n            });\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this._processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this._singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n",
      "start": 1703979087657,
      "end": 1703979087752,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1703979087752,
      "end": 1703979087752,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1703979087752,
      "end": 1703979087752,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1703979087752,
      "end": 1703979087752,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1703979087752,
      "end": 1703979087752,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1703979087752,
      "end": 1703979087752,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1703979087752,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1703979087753,
      "end": 1703979087753,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1703979087753,
      "end": 1703979087754,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1703979087754,
      "end": 1703979087754,
      "order": "normal"
    }
  ]
}
