{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-interaction-external-repulse/esm/Repulser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse || { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < 0) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n",
      "start": 1702665913063,
      "end": 1702665913135,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702665913135,
      "end": 1702665913135,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702665913135,
      "end": 1702665913135,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702665913135,
      "end": 1702665913135,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702665913135,
      "end": 1702665913135,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702665913135,
      "end": 1702665913135,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702665913135,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702665913136,
      "end": 1702665913136,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702665913136,
      "end": 1702665913145,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702665913145,
      "end": 1702665913145,
      "order": "normal"
    }
  ]
}
