{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-updater-life/esm/LifeUpdater.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n",
      "start": 1702544652278,
      "end": 1702544652359,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652359,
      "end": 1702544652359,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652359,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652360,
      "end": 1702544652360,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652360,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652361,
      "end": 1702544652361,
      "order": "normal"
    }
  ]
}
