{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.create(0, 0);\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height);\n                    particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio) / 100) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n",
      "start": 1702544652428,
      "end": 1702544652563,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652563,
      "end": 1702544652563,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652564,
      "end": 1702544652564,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652564,
      "end": 1702544652565,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652565,
      "end": 1702544652565,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652565,
      "end": 1702544652566,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652566,
      "end": 1702544652566,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652566,
      "end": 1702544652566,
      "order": "normal"
    }
  ]
}
