{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration !== undefined ? getRangeValue(this.options.life.duration) : undefined;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay =\n                        (getRangeValue(this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n",
      "start": 1702544652404,
      "end": 1702544652535,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652535,
      "end": 1702544652535,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652535,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652536,
      "end": 1702544652536,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652536,
      "end": 1702544652537,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652537,
      "end": 1702544652537,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652537,
      "end": 1702544652537,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652537,
      "end": 1702544652537,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652537,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652538,
      "end": 1702544652538,
      "order": "normal"
    }
  ]
}
