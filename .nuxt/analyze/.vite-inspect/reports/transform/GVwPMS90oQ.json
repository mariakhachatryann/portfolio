{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-engine/esm/Core/Particles.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getLogger, getPosition } from \"../Utils/Utils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { errorPrefix } from \"./Utils/Constants\";\nconst qTreeCapacity = 4;\nconst qTreeRectangle = (canvasSize) => {\n    return new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2);\n};\nexport class Particles {\n    constructor(engine, container) {\n        this._applyDensity = (options, manualCount, group) => {\n            if (!options.number.density?.enable) {\n                return;\n            }\n            const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.filter((t) => t.group === group).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n                this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            }\n            else if (particlesCount > particlesNumber) {\n                this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n        };\n        this._initDensityFactor = (densityOptions) => {\n            const container = this._container;\n            if (!container.canvas.element || !densityOptions.enable) {\n                return 1;\n            }\n            const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n            return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n        };\n        this._pushParticle = (position, overrideOptions, group, initializer) => {\n            try {\n                let particle = this.pool.pop();\n                if (particle) {\n                    particle.init(this._nextId, position, overrideOptions, group);\n                }\n                else {\n                    particle = new Particle(this._engine, this._nextId, this._container, position, overrideOptions, group);\n                }\n                let canAdd = true;\n                if (initializer) {\n                    canAdd = initializer(particle);\n                }\n                if (!canAdd) {\n                    return;\n                }\n                this._array.push(particle);\n                this._zArray.push(particle);\n                this._nextId++;\n                this._engine.dispatchEvent(\"particleAdded\", {\n                    container: this._container,\n                    data: {\n                        particle,\n                    },\n                });\n                return particle;\n            }\n            catch (e) {\n                getLogger().warning(`${errorPrefix} adding particle: ${e}`);\n                return;\n            }\n        };\n        this._removeParticle = (index, group, override) => {\n            const particle = this._array[index];\n            if (!particle || particle.group !== group) {\n                return false;\n            }\n            particle.destroy(override);\n            const zIdx = this._zArray.indexOf(particle);\n            this._array.splice(index, 1);\n            this._zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this._container,\n                data: {\n                    particle,\n                },\n            });\n            return true;\n        };\n        this._engine = engine;\n        this._container = container;\n        this._nextId = 0;\n        this._array = [];\n        this._zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this._interactionManager = new InteractionManager(engine, container);\n        const canvasSize = container.canvas.size;\n        this.quadTree = new QuadTree(qTreeRectangle(canvasSize), qTreeCapacity);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this._array.length;\n    }\n    addManualParticles() {\n        const container = this._container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(particle.position ? getPosition(particle.position, container.canvas.size) : undefined, particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this._container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this._array = [];\n        this._zArray = [];\n    }\n    destroy() {\n        this._array = [];\n        this._zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this._container;\n        container.canvas.clear();\n        await this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this._zArray) {\n            p.draw(delta);\n        }\n    }\n    filter(condition) {\n        return this._array.filter(condition);\n    }\n    find(condition) {\n        return this._array.find(condition);\n    }\n    handleClickMode(mode) {\n        this._interactionManager.handleClickMode(mode);\n    }\n    init() {\n        const container = this._container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this._interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this._interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < groupOptions.number?.value && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse?.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this._array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            this._removeParticle(i--, group, override) && deleted++;\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this._container.actualOptions, groups = options.particles.groups;\n        for (const group in groups) {\n            this._applyDensity(groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        const container = this._container, particlesToDelete = new Set();\n        this.quadTree = new QuadTree(qTreeRectangle(container.canvas.size), qTreeCapacity);\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            plugin.update && plugin.update(delta);\n        }\n        for (const particle of this._array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this._interactionManager.reset(particle);\n            for (const [, plugin] of this._container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            for (const mover of this.movers) {\n                mover.isEnabled(particle) && mover.move(particle, delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.add(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        if (particlesToDelete.size) {\n            const checkDelete = (p) => !particlesToDelete.has(p);\n            this._array = this.filter(checkDelete);\n            this._zArray = this._zArray.filter(checkDelete);\n            this.pool.push(...particlesToDelete);\n        }\n        await this._interactionManager.externalInteract(delta);\n        for (const particle of this._array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this._interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n        if (this.needsSort) {\n            const zArray = this._zArray;\n            zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = zArray[zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n    }\n}\n",
      "start": 1702544652381,
      "end": 1702544652470,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652470,
      "end": 1702544652470,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652470,
      "end": 1702544652471,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652471,
      "end": 1702544652471,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652471,
      "end": 1702544652471,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652471,
      "end": 1702544652471,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652471,
      "end": 1702544652471,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652471,
      "end": 1702544652472,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652472,
      "end": 1702544652472,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652472,
      "end": 1702544652472,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652472,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652473,
      "end": 1702544652473,
      "order": "normal"
    }
  ]
}
