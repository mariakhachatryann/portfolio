{
  "resolvedId": "C:/Users/user/Desktop/portfolio/node_modules/tsparticles-plugin-emitters/esm/Emitters.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        executeOnSingleOrMultiple(emittersOptions, (emitter) => {\n            this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n",
      "start": 1702544651996,
      "end": 1702544652100,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1702544652100,
      "end": 1702544652100,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1702544652100,
      "end": 1702544652100,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1702544652100,
      "end": 1702544652100,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1702544652100,
      "end": 1702544652100,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1702544652101,
      "end": 1702544652101,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1702544652101,
      "end": 1702544652102,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1702544652102,
      "end": 1702544652102,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1702544652102,
      "end": 1702544652103,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1702544652103,
      "end": 1702544652103,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1702544652103,
      "end": 1702544652103,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1702544652103,
      "end": 1702544652103,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1702544652103,
      "end": 1702544652103,
      "order": "normal"
    }
  ]
}
