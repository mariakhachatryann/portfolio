{"version":3,"file":"default-8d22908d.js","sources":["../../../../node_modules/nuxt/dist/app/composables/state.js","../../../../node_modules/nuxt-particles/dist/runtime/components/NuxtParticles.vue","../../../../config/particlesConfig.js"],"sourcesContent":["import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxt = useNuxtApp();\n  const state = toRef(nuxt.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxt.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : Array.isArray(keys) ? keys : [keys];\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","<template>\n  <div :id=\"id\" />\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref, onUnmounted } from 'vue'\nimport { tsParticles } from 'tsparticles-engine'\nimport {useRuntimeConfig, useState} from '#app'\nimport type {\n  ISourceOptions as ParticlesOptions,\n  Container as ParticlesContainer\n} from 'tsparticles-engine'\nimport {loadParticles} from '../lib/loaders'\n\nconst particlesLoaded = useState('__nuxt_particles_loaded', () => false)\nconst container = ref<ParticlesContainer | undefined>(undefined)\nconst { mode, lazy } = useRuntimeConfig().public.particles\n\nconst props = defineProps<{\n  id: string,\n  options?: ParticlesOptions,\n  url?: string\n}>()\n\nconst emit = defineEmits<{\n  load: [container: ParticlesContainer]\n}>()\n\nonMounted(async () => {\n  if(lazy && mode !== 'custom' && !particlesLoaded.value) {\n    tsParticles.init()\n    await loadParticles(tsParticles, mode)\n    particlesLoaded.value = true\n  }\n  const particlesContainer = await tsParticles.load({\n    id: props.id,\n    options: props.options,\n    url: props.url\n  })\n\n  if(particlesContainer) {\n    emit('load', particlesContainer)\n    container.value = particlesContainer\n  }\n})\n\nonUnmounted(() => {\n  if (!container.value) {\n    return\n  }\n  container.value.destroy()\n})\n</script>\n","const particlesConfig = {\r\n    particles: {\r\n        number: {\r\n            value: 70,\r\n            density: {\r\n                enable: true,\r\n                value_area: 800,\r\n            },\r\n        },\r\n        color: {\r\n            value: \"#0DFC4B\",\r\n        },\r\n        shape: {\r\n            type: \"circle\",\r\n            stroke: {\r\n                width: 0,\r\n                color: \"#000000\",\r\n            },\r\n            polygon: {\r\n                nb_sides: 5,\r\n            },\r\n            image: {\r\n                src: \"img/github.svg\",\r\n                width: 100,\r\n                height: 100,\r\n            },\r\n        },\r\n        opacity: {\r\n            value: .5,\r\n            random: false,\r\n            anim: {\r\n                enable: false,\r\n                speed: 1,\r\n                opacity_min: 0.1,\r\n                sync: false,\r\n            },\r\n        },\r\n        size: {\r\n            value: 3,\r\n            random: true,\r\n            anim: {\r\n                enable: false,\r\n                speed: 40,\r\n                size_min: 0.1,\r\n                sync: false,\r\n            },\r\n        },\r\n        line_linked: {\r\n            enable: true,\r\n            distance: 150,\r\n            color: \"#0DFC4B\",\r\n            opacity: 0.1,\r\n            width: 1,\r\n        },\r\n        move: {\r\n            enable: true,\r\n            speed: 2,\r\n            direction: \"none\",\r\n            random: false,\r\n            straight: false,\r\n            out_mode: \"out\",\r\n            bounce: false,\r\n            attract: {\r\n                enable: false,\r\n                rotateX: 600,\r\n                rotateY: 1200,\r\n            },\r\n        },\r\n    },\r\n    interactivity: {\r\n        detect_on: \"canvas\",\r\n        events: {\r\n            resize: true,\r\n        },\r\n        modes: {\r\n            grab: {\r\n                distance: 400,\r\n                line_linked: {\r\n                    opacity: 1,\r\n                },\r\n            },\r\n            bubble: {\r\n                distance: 400,\r\n                size: 40,\r\n                duration: 2,\r\n                opacity: 8,\r\n                speed: 3,\r\n            },\r\n            repulse: {\r\n                distance: 100,\r\n                duration: 0.4,\r\n            },\r\n            push: {\r\n                particles_nb: 4,\r\n            },\r\n            remove: {\r\n                particles_nb: 2,\r\n            },\r\n        },\r\n    },\r\n    retina_detect: true,\r\n};\r\n\r\nexport default particlesConfig;"],"names":[],"mappings":"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","x_google_ignoreList":[0,1]}